{"version":3,"sources":["components/TodoForm.jsx","components/Todo.jsx","components/TodoList.jsx","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","ref","onChange","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodos","removeArr","filter","todoId","newValue","prev","item","updatedTodos","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNA2DeA,EAzDE,SAACC,GAAW,IAAD,EAEEC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAF3C,mBAEjBC,EAFiB,KAEVC,EAFU,KAIlBC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAIrB,IAAMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOV,QAatB,OACI,sBAAMW,UAAW,WAAYC,SAZZ,SAAAH,GACjBA,EAAEI,iBAEFhB,EAAMe,SAAS,CACXE,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAEVC,EAAS,KAKT,SACKL,EAAME,KAEC,qCACI,uBAAOoB,KAAK,OACLC,YAAa,8FACbC,KAAM,OACNrB,MAAOC,EACPU,UAAW,YACXW,IAAKnB,EACLoB,SAAUf,IACjB,wBAAQG,UAAW,aAAnB,iEAIJ,qCACI,uBAAOQ,KAAK,OACLC,YAAa,6JACbC,KAAM,OACNrB,MAAOC,EACPU,UAAW,YACXW,IAAKnB,EACLoB,SAAUf,IACjB,wBAAQG,UAAW,aAAnB,+G,gBCNTa,EAvCF,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,MAAOC,EAA0C,EAA1CA,aAAcC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,WAAgB,EAEpC9B,mBAAS,CAC7BgB,GAAI,KACJd,MAAO,KAJiD,mBAErDD,EAFqD,KAE/C8B,EAF+C,KAe5D,OAAI9B,EAAKe,GACE,cAAC,EAAD,CAAUf,KAAMA,EAAMa,SATZ,SAAAZ,GACjB4B,EAAW7B,EAAKe,GAAId,GACpB6B,EAAQ,CACJf,GAAI,KACJd,MAAO,QAWRyB,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,sBAAKrB,UAAWoB,EAAKE,WAAa,mBAAqB,UAAvD,UAGI,qBAAmBC,QAAS,kBAAMR,EAAaK,EAAKjB,KAApD,SACKiB,EAAKb,MADAa,EAAKjB,IAGf,sBAAKH,UAAW,QAAhB,UACI,cAAC,IAAD,CAAmBuB,QAAS,kBAAMP,EAAWI,EAAKjB,KAClDH,UAAW,eACX,cAAC,IAAD,CAAQuB,QAAS,kBAAML,EAAQ,CAACf,GAAIiB,EAAKjB,GAAId,MAAO+B,EAAKb,QACjDP,UAAW,kBATjBqB,OC4BHG,EApDE,WAAO,IAAD,EACOrC,mBAAS,IADhB,mBACZ2B,EADY,KACLW,EADK,KAuCnB,OACI,gCACI,wJACA,cAAC,EAAD,CAAUxB,SAvCF,SAAAmB,GACZ,GAAKA,EAAKb,OAAQ,QAAQmB,KAAKN,EAAKb,MAApC,CAGA,IAAMoB,EAAQ,CAAIP,GAAJ,mBAAaN,IAC3BW,EAASE,OAmCL,cAAC,EAAD,CAAMb,MAAOA,EACPE,WA1BK,SAAAb,GACf,IAAMyB,EAAY,YAAId,GAAOe,QAAO,SAAAT,GAAI,OAAIA,EAAKjB,KAAOA,KACxDsB,EAASG,IAyBCX,WAlCK,SAACa,EAAQC,GACnBA,EAASxB,OAAQ,QAAQmB,KAAKK,EAASxB,OAG5CkB,GAAS,SAAAO,GAAI,OAAIA,EAAKb,KAAI,SAAAc,GAAI,OAAKA,EAAK9B,KAAO2B,EAASC,EAAWE,SA+BzDlB,aApBO,SAAAZ,GACjB,IAAI+B,EAAepB,EAAMK,KAAI,SAAAC,GAIzB,OAHIA,EAAKjB,KAAOA,IACZiB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXK,EAASS,UC3BFC,MARf,WACE,OACE,qBAAKnC,UAAU,UAAf,SACE,cAAC,EAAD,OCHNoC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.d9cfd358.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\r\n\r\nconst TodoForm = (props) => {\r\n\r\n    const [input, setInput] = useState(props.edit ? props.edit.value : '')\r\n\r\n    const inputRef = useRef(null)\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus()\r\n    })\r\n\r\n\r\n    const handleChange = e => {\r\n        setInput(e.target.value)\r\n    }\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 10000),\r\n            text: input\r\n        })\r\n        setInput('')\r\n\r\n    }\r\n\r\n    return (\r\n        <form className={'todoForm'} onSubmit={handleSubmit}>\r\n            {props.edit\r\n                ? (\r\n                    <>\r\n                        <input type=\"text\"\r\n                               placeholder={'Измените задание'}\r\n                               name={'text'}\r\n                               value={input}\r\n                               className={'todoInput'}\r\n                               ref={inputRef}\r\n                               onChange={handleChange}/>\r\n                        <button className={'todoButton'}>Изменить</button>\r\n                    </>\r\n                )\r\n                : (\r\n                    <>\r\n                        <input type=\"text\"\r\n                               placeholder={'Добавьте задание в список дел'}\r\n                               name={'text'}\r\n                               value={input}\r\n                               className={'todoInput'}\r\n                               ref={inputRef}\r\n                               onChange={handleChange}/>\r\n                        <button className={'todoButton'}>Добавить задание</button>\r\n                    </>)}\r\n\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nexport default TodoForm\r\n","import React, {useState} from 'react'\r\nimport {RiCloseCircleLine, TiEdit} from \"react-icons/all\";\r\nimport TodoForm from \"./TodoForm\";\r\n\r\n\r\n\r\nconst Todo = ({todos, completeTodo, removeTodo, updateTodo}) => {\r\n\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        value: ''\r\n    })\r\n\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id, value)\r\n        setEdit({\r\n            id: null,\r\n            value: ''\r\n        })\r\n    }\r\n\r\n    if (edit.id) {\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />\r\n    }\r\n\r\n\r\n\r\n\r\n    return todos.map((todo, index) => (\r\n        <div className={todo.isComplete ? 'todoRow complete' : 'todoRow'}\r\n             key={index}>\r\n\r\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n                {todo.text}\r\n            </div>\r\n            <div className={'icons'}>\r\n                <RiCloseCircleLine onClick={() => removeTodo(todo.id)}\r\n                className={'deleteIcon'} />\r\n                <TiEdit onClick={() => setEdit({id: todo.id, value: todo.text})}\r\n                        className={'editIcon'} />\r\n            </div>\r\n\r\n        </div>\r\n    ))\r\n}\r\nexport default Todo\r\n","import React, {useState} from 'react'\r\nimport TodoForm from \"./TodoForm\";\r\nimport Todo from \"./Todo\";\r\n\r\n\r\n\r\nconst TodoList = () => {\r\n    const [todos, setTodos] = useState([])\r\n\r\n    const addTodo = todo => {\r\n        if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n            return\r\n        }\r\n        const newTodos = [todo, ...todos]\r\n        setTodos(newTodos)\r\n    }\r\n\r\n    const updateTodo = (todoId, newValue) => {\r\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n            return\r\n        }\r\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)))\r\n    }\r\n\r\n    const removeTodo = id => {\r\n        const removeArr = [...todos].filter(todo => todo.id !== id)\r\n        setTodos(removeArr)\r\n    }\r\n\r\n\r\n\r\n\r\n    const completeTodo = id => {\r\n        let updatedTodos = todos.map(todo => {\r\n            if (todo.id === id) {\r\n                todo.isComplete = !todo.isComplete\r\n            }\r\n            return todo\r\n        })\r\n        setTodos(updatedTodos)\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Какие планы на сегодня?</h1>\r\n            <TodoForm onSubmit={addTodo}/>\r\n            <Todo todos={todos}\r\n                  removeTodo={removeTodo}\r\n                  updateTodo={updateTodo}\r\n                  completeTodo={completeTodo}/>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import React from 'react';\nimport './App.css';\nimport TodoList from \"./components/TodoList\";\n\nfunction App() {\n  return (\n    <div className=\"todoApp\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n\r\n)\r\n"],"sourceRoot":""}